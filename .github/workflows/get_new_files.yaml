name: Get Newly Added Downloadable Files

on:
  repository_dispatch:
    types: get-new-files

jobs:
  get-new-files:
    runs-on: ubuntu-latest

    env:
      TRIGGER_REPO: "SyedShamail1/Repo-B"
      SECRET_REP_A_PAT: ${{ secrets.REPO_A_PAT }}

    steps:

      - name: Checkout source code
        uses: actions/checkout@v2

      # Install jq for json response handling
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Call GitHub REST API to get commit SHAs
      - name: Fetch commit SHAs
        id: fetch_commit_shas
        run: |
          PREV_COMMIT_SHA=$(curl -s -H "Authorization: Bearer ${{ secrets.REPO_A_PAT }}" \
            "https://api.github.com/repos/${{ env.TRIGGER_REPO }}/commits?sha=main" \
            | jq -r '.[1].sha')
          CURRENT_COMMIT_SHA=$(curl -s -H "Authorization: Bearer ${{ secrets.REPO_A_PAT }}" \
            "https://api.github.com/repos/${{ env.TRIGGER_REPO }}/commits?sha=main" \
            | jq -r '.[0].sha')
          echo "PREV_COMMIT_SHA=${PREV_COMMIT_SHA}" >> $GITHUB_ENV
          echo "CURRENT_COMMIT_SHA=${CURRENT_COMMIT_SHA}" >> $GITHUB_ENV
          echo "PREV_COMMIT_SHA=${PREV_COMMIT_SHA}" 
          echo "CURRENT_COMMIT_SHA=${CURRENT_COMMIT_SHA}" 

       # Call GitHub REST API to get the latest files added
      - name: Get the list of added files using GitHub API
        id: added_files
        run: |
          PREVIOUS_SHA=$(git rev-parse ${{ github.event.before }})
          URL="https://api.github.com/repos/${{ env.TRIGGER_REPO }}/compare/${{ env.PREV_COMMIT_SHA }}...${{ env.CURRENT_COMMIT_SHA }}"
          ADDED_FILES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $URL | jq -r '.files[] | select(.status == "added") | .filename')

          # Convert the list of added files to an array in JSON format
          ADDED_FILES_ARRAY="$(echo "$ADDED_FILES" | sed 's/.*/"&"/' | paste -sd ',')"

          echo "::set-output name=files::$ADDED_FILES_ARRAY"

      # Construct GitHub downloadable links for the newly added files
      - name: Construct downloadable links
        id: contruct_downloadable_links
        run: |
          ADDED_FILES=(${{ steps.added_files.outputs.files }})  # Convert the string to an array

          IFS=$'\n' # Set the Internal Field Separator to newline to handle spaces in file names

          REQUEST_BODY="{\"files\": ["

          for FILE in "${ADDED_FILES[@]}"; do  # Iterate through the array
            # Replace spaces with %20 in the file name
            FILE_NAME_FILTERED="${FILE// /%20}"

            # Construct the GitHub API URL to get the raw file link
            GITHUB_API_URL="https://api.github.com/repos/${{ env.TRIGGER_REPO }}/contents/$FILE_NAME_FILTERED"

            # Make a GET request to the GitHub API to get the raw file link
            DOWNLOADABLE_LINK=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $GITHUB_API_URL | jq -r '.download_url')

            REQUEST_BODY="${REQUEST_BODY}\"$DOWNLOADABLE_LINK\","
            echo "Downloadable Link: $DOWNLOADABLE_LINK"
            echo "Filtered file name: $FILE_NAME_FILTERED"
            echo "New file added: $FILE"
            echo "New file path: $FILE_path"

          done  # End of the loop # Here you can add more actions or commands you want to perform for each new file added.
          REQUEST_BODY="${REQUEST_BODY%,}]}"  # Remove the trailing comma and close the array
          echo "Request Body : $REQUEST_BODY"

      
          

  
